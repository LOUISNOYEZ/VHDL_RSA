----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 16.01.2021 01:55:16
-- Design Name: 
-- Module Name: FSM - FSM_arch
-- Project Name:  
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use work.RSA_package.all;
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity FSM is
    Port (clock_i : in STD_LOGIC;
          reset_i : in STD_LOGIC;
          start_i : in STD_LOGIC;
          count_i : in STD_LOGIC_VECTOR(counter_data_width-1 downto 0);
          carry_i : in STD_LOGIC;
          carry_instant_i : in STD_LOGIC;
          order_reg_data_output_i : in STD_LOGIC_VECTOR(2 downto 0);
          op_a_cursor_i : in STD_LOGIC;
          data_mem_reset_o : out STD_LOGIC;
          data_mem_en_o : out STD_LOGIC;
          counter_mem_reset_o : out STD_LOGIC;
          counter_mem_en_o : out STD_LOGIC;
          counter_mem_write_address_o : out STD_LOGIC_VECTOR(counter_addr_width-1 downto 0);
          counter_mem_read_address_0_o : out STD_LOGIC_VECTOR(counter_addr_width-1 downto 0);
          counter_mem_read_address_1_o : out STD_LOGIC_VECTOR(counter_addr_width-1 downto 0);
          address_mem_reset_o : out STD_LOGIC;
          address_mem_en_o : out STD_LOGIC;
          address_mem_write_address_o : out STD_LOGIC_VECTOR(address_addr_width-1 downto 0);
          address_mem_read_address_0_o : out STD_LOGIC_VECTOR(address_addr_width-1 downto 0);
          address_mem_read_address_1_o : out STD_LOGIC_VECTOR(address_addr_width-1 downto 0);
          address_mem_read_address_2_o : out STD_LOGIC_VECTOR(address_addr_width-1 downto 0);
          address_mem_data_input_o : out STD_LOGIC_VECTOR(addr_width-1 downto 0);
          accu_0_reset_o : out STD_LOGIC;
          accu_0_en_o : out STD_LOGIC;
          accu_1_reset_o : out STD_LOGIC;
          accu_1_en_o : out STD_LOGIC;
          order_reg_reset_o : out STD_LOGIC;
          order_reg_en_o : out STD_LOGIC;
          order_reg_data_input_o : out STD_LOGIC_VECTOR(2 downto 0);
          carry_reg_reset_o : out STD_LOGIC;
          carry_reg_set_o : out STD_LOGIC;
          carry_reg_en_o : out STD_LOGIC;
          counter_inst_reset_o : out STD_LOGIC;
          counter_inst_set_o : out STD_LOGIC;
          counter_inst_en_o : out STD_LOGIC;
          control_o : out STD_LOGIC_VECTOR(2 downto 0);
          sel_accu_o : out STD_LOGIC;
          done_o : out STD_LOGIC );
end FSM;

architecture FSM_arch of FSM is

    type state_t is (RESET, INIT, DATA_LOAD, 
                     MGT_FIRST_SET_WRITE_REG, MGT_FIRST_SET_OP_A, MGT_FIRST_SET_OP_B, S_MUL_ACCU_LOW, S_MUL_ACCU_HIGH, S_LOAD_MUL_RESULT_COUNTER,
                     S_STORE_LOW, S_STORE_HIGH, S_PROPAGATE_CARRY, S_LOAD_OP_B_COUNTER,
                     S_CHECK_OP_B_COUNTER, S_STORE_OP_B_COUNTER,
                     S_RESET_OP_B_COUNTER, S_LOAD_OP_A_COUNTER, S_CHECK_OP_A_COUNTER,
                     S_STORE_OP_A_COUNTER, S_INIT_MUL_RESULT_COUNTER,
                     T_SET_WRITE_REG, T_SET_OP_A, T_SET_OP_B, T_MUL_ACCU_LOW, T_MUL_ACCU_HIGH, T_LOAD_MUL_RESULT_COUNTER,
                     T_STORE_LOW, T_STORE_HIGH, T_PROPAGATE_CARRY, T_LOAD_OP_B_COUNTER,
                     T_CHECK_OP_B_COUNTER, T_STORE_OP_B_COUNTER,
                     T_RESET_OP_B_COUNTER, T_LOAD_OP_A_COUNTER, T_CHECK_OP_A_COUNTER,
                     T_STORE_OP_A_COUNTER, T_INIT_MUL_RESULT_COUNTER,
                     M_MUL_SET_WRITE_REG, M_MUL_SET_OP_A, M_MUL_SET_OP_B, M_MUL_ACCU_LOW, M_MUL_ACCU_HIGH, M_LOAD_MUL_RESULT_COUNTER,
                     M_STORE_LOW, M_STORE_HIGH, M_PROPAGATE_CARRY, M_LOAD_OP_B_COUNTER,
                     M_CHECK_OP_B_COUNTER, M_STORE_OP_B_COUNTER,
                     M_RESET_OP_B_COUNTER, M_LOAD_OP_A_COUNTER, M_CHECK_OP_A_COUNTER,
                     M_STORE_OP_A_COUNTER, M_INIT_MUL_RESULT_COUNTER,
                     M_ADD_SET_WRITE_REG, M_ADD_SET_OP_A, M_ADD_SET_OP_B, M_ADD_ANY,
                     U_SET_OP_A, U_SET_OP_B, U_SUB_ANY, U_CHECK_CARRY,U_COPY,
                     FIRST_X_SET_WRITE_REG, FIRST_X_SET_OP_A, FIRST_X_SET_OP_B, FIRST_X_SUB_ANY,
                     MGT_ANY_0_SET_WRITE_REG, MGT_ANY_0_SET_OP_A, MGT_ANY_0_SET_OP_B,                 
                     MGT_ANY_1_SET_WRITE_REG, MGT_ANY_1_SET_OP_A, MGT_ANY_1_SET_OP_B,
                     MGT_FINAL_0_SET_WRITE_REG, MGT_FINAL_0_SET_OP_A, MGT_FINAL_0_SET_OP_B,
                     MGT_FINAL_1_SET_WRITE_REG,
                     X_COPY_TO_S_SET_WRITE_REG, X_COPY_TO_S_SET_OP_A, X_COPY_TO_S_RESET_S, X_COPY_TO_S_INIT_COPY,  X_COPY_TO_S_COPY,
                     CHECK_ORDER, LOAD_EXP_COUNTER, CHECK_EXP,
                     LOAD_EXP_COUNTER_1, INC_COUNTER,
                     SET_RESET_M_OP_A, SET_RESET_S_WRITE_REG, RESET_S, SET_RESET_T_WRITE_REG, RESET_T, SET_RESET_M_WRITE_REG, RESET_M,
                     U_OVERFLOW_SET_OP_A, U_OVERFLOW_SET_OP_B, U_OVERFLOW_SUB_ANY,
                     DONE);
    
    signal current_state_s : state_t;
    signal future_state_s : state_t;

begin

    P0 : process(clock_i)
    begin
        if clock_i'event and clock_i = '1' then
            if reset_i = '0' then
                current_state_s <= RESET;
            else
                current_state_s <= future_state_s;
            end if;
        end if;
    end process;
    
    P1 : process(current_state_s, clock_i, reset_i, start_i, count_i, carry_i)
    begin
        case current_state_s is
            when RESET =>
                future_state_s <= INIT;
            when INIT =>
                if start_i = '1' then
                    future_state_s <= DATA_LOAD;
                else
                    future_state_s <= INIT;
                end if;
            when DATA_LOAD =>
                if To_Integer(Unsigned(count_i)) = register_amount-2*data_offset-1 then
                    future_state_s <= MGT_FIRST_SET_WRITE_REG;
                else
                    future_state_s <= DATA_LOAD;
                end if;
            when MGT_FIRST_SET_WRITE_REG =>
                future_state_s <= MGT_FIRST_SET_OP_A;
            when MGT_FIRST_SET_OP_A =>
                future_state_s <= MGT_FIRST_SET_OP_B;
            when MGT_FIRST_SET_OP_B =>
                future_state_s <= S_MUL_ACCU_LOW;
            when S_MUL_ACCU_LOW =>
                future_state_s <= S_MUL_ACCU_HIGH;
            when S_MUL_ACCU_HIGH =>
                if To_Integer(Unsigned(count_i)) = data_width-1 then
                    future_state_s <= S_LOAD_MUL_RESULT_COUNTER;
                else
                    future_state_s <= S_MUL_ACCU_LOW;
                end if;
            when S_LOAD_MUL_RESULT_COUNTER =>
                future_state_s <= S_STORE_LOW;
            when S_STORE_LOW =>
                future_state_s <= S_STORE_HIGH;
            when S_STORE_HIGH =>
                if carry_instant_i = '1' then
                    future_state_s <= S_PROPAGATE_CARRY;
                else
                    future_state_s <= S_LOAD_OP_B_COUNTER;
                end if;
            when S_PROPAGATE_CARRY =>
                if carry_instant_i = '1' then 
                    future_state_s <= S_PROPAGATE_CARRY;
                else
                    future_state_s <= S_LOAD_OP_B_COUNTER;
                end if;
            when S_LOAD_OP_B_COUNTER =>
                future_state_s <= S_CHECK_OP_B_COUNTER;
            when S_CHECK_OP_B_COUNTER =>
                if To_Integer(Unsigned(count_i)) = data_offset-1 then
                    future_state_s <= S_RESET_OP_B_COUNTER;
                else
                    future_state_s <= S_STORE_OP_B_COUNTER;
                end if;
            when S_STORE_OP_B_COUNTER =>
                future_state_s <= S_MUL_ACCU_LOW;
            when S_RESET_OP_B_COUNTER =>
                future_state_s <= S_LOAD_OP_A_COUNTER;
            when S_LOAD_OP_A_COUNTER =>
                future_state_s <= S_CHECK_OP_A_COUNTER;
            when S_CHECK_OP_A_COUNTER =>
                if To_Integer(Unsigned(count_i)) = data_offset-1 then
                    future_state_s <= T_SET_WRITE_REG;
                else
                    future_state_s <= S_STORE_OP_A_COUNTER;
                end if;
            when S_STORE_OP_A_COUNTER =>
                future_state_s <= S_INIT_MUL_RESULT_COUNTER;
            when S_INIT_MUL_RESULT_COUNTER =>
                future_state_s <= S_MUL_ACCU_LOW;
            when T_SET_WRITE_REG =>
                future_state_s <= T_SET_OP_A;
            when T_SET_OP_A =>
                future_state_s <= T_SET_OP_B;
            when T_SET_OP_B =>
                future_state_s <= T_MUL_ACCU_LOW;
            when T_MUL_ACCU_LOW =>
                future_state_s <= T_MUL_ACCU_HIGH;
            when T_MUL_ACCU_HIGH =>
            
                if To_Integer(Unsigned(count_i)) = data_width-1 then
                    future_state_s <= T_LOAD_MUL_RESULT_COUNTER;
                else
                    future_state_s <= T_MUL_ACCU_LOW;
                end if;
            when T_LOAD_MUL_RESULT_COUNTER =>
                future_state_s <= T_STORE_LOW;
            when T_STORE_LOW =>
                if To_Integer(Unsigned(count_i)) >= data_offset-1 then
                    future_state_s <= T_RESET_OP_B_COUNTER;
                else
                    future_state_s <= T_STORE_HIGH;
                end if;
            when T_STORE_HIGH =>
                if To_Integer(Unsigned(count_i)) >= data_offset-1 then
                    future_state_s <= T_LOAD_OP_B_COUNTER;
                else
                    if carry_instant_i = '1' then
                        future_state_s <= T_PROPAGATE_CARRY;
                    else
                        future_state_s <= T_LOAD_OP_B_COUNTER;
                    end if;
                end if;
            when T_PROPAGATE_CARRY =>
                if To_Integer(Unsigned(count_i)) >= data_offset-1 then
                    future_state_s <= T_LOAD_OP_B_COUNTER;
                elsif carry_instant_i = '1' then 
                    future_state_s <= T_PROPAGATE_CARRY;
                else
                    future_state_s <= T_LOAD_OP_B_COUNTER;
                end if;
            when T_LOAD_OP_B_COUNTER =>
                future_state_s <= T_CHECK_OP_B_COUNTER;
            when T_CHECK_OP_B_COUNTER =>
                if To_Integer(Unsigned(count_i)) = data_offset-1 then
                    future_state_s <= T_RESET_OP_B_COUNTER;
                else
                    future_state_s <= T_STORE_OP_B_COUNTER;
                end if;
            when T_STORE_OP_B_COUNTER =>
                future_state_s <= T_MUL_ACCU_LOW;
            when T_RESET_OP_B_COUNTER =>
                future_state_s <= T_LOAD_OP_A_COUNTER;
            when T_LOAD_OP_A_COUNTER =>
                future_state_s <= T_CHECK_OP_A_COUNTER;
            when T_CHECK_OP_A_COUNTER =>
                if To_Integer(Unsigned(count_i)) = data_offset-1 then
                    future_state_s <= M_MUL_SET_WRITE_REG;
                else
                    future_state_s <= T_STORE_OP_A_COUNTER;
                end if;
            when T_STORE_OP_A_COUNTER =>
                future_state_s <= T_INIT_MUL_RESULT_COUNTER;
            when T_INIT_MUL_RESULT_COUNTER =>
                future_state_s <= T_MUL_ACCU_LOW;
            when M_MUL_SET_WRITE_REG =>
                future_state_s <= M_MUL_SET_OP_A;
            when M_MUL_SET_OP_A =>
                future_state_s <= M_MUL_SET_OP_B;
            when M_MUL_SET_OP_B =>
                future_state_s <= M_MUL_ACCU_LOW;
            when M_MUL_ACCU_LOW =>
                future_state_s <= M_MUL_ACCU_HIGH;
            when M_MUL_ACCU_HIGH =>
                if To_Integer(Unsigned(count_i)) = data_width-1 then
                    future_state_s <= M_LOAD_MUL_RESULT_COUNTER;
                else
                    future_state_s <= M_MUL_ACCU_LOW;
                end if;
            when M_LOAD_MUL_RESULT_COUNTER =>
                future_state_s <= M_STORE_LOW;
            when M_STORE_LOW =>
                future_state_s <= M_STORE_HIGH;
            when M_STORE_HIGH =>
                if carry_instant_i = '1' then
                    future_state_s <= M_PROPAGATE_CARRY;
                else
                    future_state_s <= M_LOAD_OP_B_COUNTER;
                end if;
            when M_PROPAGATE_CARRY =>
                if carry_instant_i = '1' then 
                    future_state_s <= M_PROPAGATE_CARRY;
                else
                    future_state_s <= M_LOAD_OP_B_COUNTER;
                end if;
            when M_LOAD_OP_B_COUNTER =>
                future_state_s <= M_CHECK_OP_B_COUNTER;
            when M_CHECK_OP_B_COUNTER =>
                if To_Integer(Unsigned(count_i)) = data_offset-1 then
                    future_state_s <= M_RESET_OP_B_COUNTER;
                else
                    future_state_s <= M_STORE_OP_B_COUNTER;
                end if;
            when M_STORE_OP_B_COUNTER =>
                future_state_s <= M_MUL_ACCU_LOW;
            when M_RESET_OP_B_COUNTER =>
                future_state_s <= M_LOAD_OP_A_COUNTER;
            when M_LOAD_OP_A_COUNTER =>
                future_state_s <= M_CHECK_OP_A_COUNTER;
            when M_CHECK_OP_A_COUNTER =>
                if To_Integer(Unsigned(count_i)) = data_offset-1 then
                    future_state_s <= M_ADD_SET_WRITE_REG;
                else
                    future_state_s <= M_STORE_OP_A_COUNTER;
                end if;
            when M_STORE_OP_A_COUNTER =>
                future_state_s <= M_INIT_MUL_RESULT_COUNTER;
            when M_INIT_MUL_RESULT_COUNTER =>
                future_state_s <= M_MUL_ACCU_LOW;
            when M_ADD_SET_WRITE_REG =>
                future_state_s <= M_ADD_SET_OP_A;
            when M_ADD_SET_OP_A =>
                future_state_s <= M_ADD_SET_OP_B;
            when M_ADD_SET_OP_B =>
                future_state_s <= M_ADD_ANY;
            when M_ADD_ANY =>
                if To_Integer(Unsigned(count_i)) = 2*data_offset-1 then
                    if carry_instant_i = '1' then
                        future_state_s <= U_OVERFLOW_SET_OP_A;
                    else
                        future_state_s <= U_SET_OP_A;
                    end if;
                else
                    future_state_s <= M_ADD_ANY;
                end if;
            when U_SET_OP_A =>
                future_state_s <= U_SET_OP_B;
            when U_SET_OP_B =>
                future_state_s <= U_SUB_ANY;
            when U_SUB_ANY =>
                if To_Integer(Unsigned(count_i)) = data_offset-1 then
                    future_state_s <= U_CHECK_CARRY;
                else
                    future_state_s <= U_SUB_ANY;
                end if;
            when U_CHECK_CARRY =>
                if carry_i = '1' then
                    future_state_s <= SET_RESET_M_OP_A;
                else
                    future_state_s <= U_COPY;
                end if;
            when U_COPY =>
                if To_Integer(Unsigned(count_i)) = data_offset-1 then
                    future_state_s <= SET_RESET_M_OP_A;
                else
                    future_state_s <= U_COPY;
                end if;
            when U_OVERFLOW_SET_OP_A =>
                future_state_s <= U_OVERFLOW_SET_OP_B;
            when U_OVERFLOW_SET_OP_B =>
                future_state_s <= U_OVERFLOW_SUB_ANY;
            when U_OVERFLOW_SUB_ANY =>
                if To_Integer(Unsigned(count_i )) = data_offset-1 then
                    future_state_s <= SET_RESET_M_OP_A;
                else
                    future_state_s <= U_OVERFLOW_SUB_ANY;
                end if;
            when SET_RESET_M_OP_A =>
                future_state_s <= SET_RESET_M_WRITE_REG;
            when SET_RESET_S_WRITE_REG =>
                future_state_s <= RESET_S;
            when RESET_S =>
                if To_Integer(Unsigned(count_i)) = 2*data_offset-1 then
                    future_state_s <= SET_RESET_T_WRITE_REG;
                else
                    future_state_s <= RESET_S;
                end if;
            WHEN SET_RESET_T_WRITE_REG =>
                future_state_s <= RESET_T;
            when RESET_T =>
                if To_Integer(Unsigned(count_i)) = data_offset-1 then
                    future_state_s <= CHECK_ORDER;
                else
                    future_state_s <= RESET_T;
                end if;
            when SET_RESET_M_WRITE_REG =>
                future_state_s <= RESET_M;
            when RESET_M =>
                if To_Integer(Unsigned(count_i)) = data_offset-1 then
                    future_state_s <= SET_RESET_S_WRITE_REG;
                else
                    future_state_s <= RESET_M;
                end if;
            when CHECK_ORDER =>
                if order_reg_data_output_i = FIRST then
                    future_state_s <= FIRST_X_SET_WRITE_REG;
                elsif order_reg_data_output_i = ANY_0 then
                    future_state_s <= LOAD_EXP_COUNTER;
                elsif order_reg_data_output_i = ANY_1 then
                    future_state_s <= LOAD_EXP_COUNTER_1;
                elsif order_reg_data_output_I = FINAL_0 then
                    future_state_s <= MGT_FINAL_1_SET_WRITE_REG;
                elsif order_reg_data_output_I = FINAL_1 then
                    future_state_s <= DONE;
                end if;
            when LOAD_EXP_COUNTER =>
                future_state_s <= CHECK_EXP;
            when LOAD_EXP_COUNTER_1 =>
                future_state_s <= INC_COUNTER;
            when INC_COUNTER =>
                future_state_s <= MGT_ANY_0_SET_WRITE_REG;
            when CHECK_EXP =>
                if To_Integer(Unsigned(count_i)) = message_width-1 then
                    if op_a_cursor_i = '1' then
                        future_state_s <= MGT_FINAL_0_SET_WRITE_REG;
                    else
                        future_state_s <= MGT_FINAL_1_SET_WRITE_REG;
                    end if;
                else
                    if op_a_cursor_i = '1' then
                        future_state_s <= MGT_ANY_1_SET_WRITE_REG;
                    else
                        future_state_s <= MGT_ANY_0_SET_WRITE_REG;
                    end if;
                end if;    
            when FIRST_X_SET_WRITE_REG =>
                future_state_s <= FIRST_X_SET_OP_A;
            when FIRST_X_SET_OP_A =>
                future_state_s <= FIRST_X_SET_OP_B;
            when FIRST_X_SET_OP_B =>
                future_state_s <= FIRST_X_SUB_ANY;
            when FIRST_X_SUB_ANY =>
                if To_Integer(Unsigned(count_i)) = data_offset-1 then
                    future_state_s <= LOAD_EXP_COUNTER;
                else
                    future_state_s <= FIRST_X_SUB_ANY;
                end if;
            when MGT_ANY_0_SET_WRITE_REG =>
                future_state_s <= MGT_ANY_0_SET_OP_A;
            when MGT_ANY_0_SET_OP_A =>
                future_state_s <= MGT_ANY_0_SET_OP_B;
            when MGT_ANY_0_SET_OP_B =>
                future_state_s <= S_MUL_ACCU_LOW;
            when MGT_ANY_1_SET_WRITE_REG =>
                future_state_s <= MGT_ANY_1_SET_OP_A;
            when MGT_ANY_1_SET_OP_A =>
                future_state_s <= MGT_ANY_1_SET_OP_B;
            when MGT_ANY_1_SET_OP_B =>
                future_state_s <= S_MUL_ACCU_LOW;
            when MGT_FINAL_0_SET_WRITE_REG =>
                future_state_s <= MGT_FINAL_0_SET_OP_A;
            when MGT_FINAL_0_SET_OP_A =>
                future_state_s <= MGT_FINAL_0_SET_OP_B;
            when MGT_FINAL_0_SET_OP_B =>
                future_state_s <= S_MUL_ACCU_LOW;
            when MGT_FINAL_1_SET_WRITE_REG =>
                future_state_s <= X_COPY_TO_S_SET_WRITE_REG;
            when X_COPY_TO_S_SET_WRITE_REG =>
                future_state_s <= X_COPY_TO_S_SET_OP_A;
            when X_COPY_TO_S_SET_OP_A =>
                future_state_s <= X_COPY_TO_S_RESET_S;
            when X_COPY_TO_S_RESET_S =>
                if To_Integer(Unsigned(count_i)) = 2*data_offset-1 then
                    future_state_s <= X_COPY_TO_S_INIT_COPY;
                else
                    future_state_s <= X_COPY_TO_S_RESET_S;
                end if;
            when X_COPY_TO_S_INIT_COPY =>
                future_state_s <= X_COPY_TO_S_COPY;
            when X_COPY_TO_S_COPY =>
                if To_Integer(Unsigned(count_i)) = data_offset-1 then
                    future_state_s <= T_SET_WRITE_REG;
                else
                    future_state_s <= X_COPY_TO_S_COPY;
                end if;
            when DONE =>
                future_state_s <= DONE;
            when others =>
                future_state_s <= RESET;
        end case;
    end process;
    
    P2 : process(current_state_s)
    begin
        case current_state_s is
            when RESET =>
                data_mem_reset_o <= '0';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '0';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '0';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '0';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0');
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= LOAD_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when INIT =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '0';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0');
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= LOAD_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when DATA_LOAD =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '1';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0');
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= LOAD_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when MGT_FIRST_SET_WRITE_REG =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0'); 
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= MGT_RESULT_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= A_ADDRESS;
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '1';
                order_reg_data_input_o <= FIRST;
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= LOAD_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when MGT_FIRST_SET_OP_A =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= MGT_OP_A_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= MESSAGE_ADDRESS;
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= LOAD_MODE;
                sel_accu_o <= '0';
                done_o <= '0'; 
            when MGT_FIRST_SET_OP_B =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= MGT_OP_B_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= R_2_MOD_N_ADDRESS;
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= LOAD_MODE;
                sel_accu_o <= '0';
                done_o <= '0';          
            when S_MUL_ACCU_LOW =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= MUL_OP_A_COUNTER_ADDRESS;
                counter_mem_read_address_1_o <= MUL_OP_B_COUNTER_ADDRESS;
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= MGT_OP_A_ADDRESS_ADDR;
                address_mem_read_address_1_o <= MGT_OP_B_ADDRESS_ADDR;
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');                
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '1';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_ACCU_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when S_MUL_ACCU_HIGH =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= MUL_OP_A_COUNTER_ADDRESS;
                counter_mem_read_address_1_o <= MUL_OP_B_COUNTER_ADDRESS;
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= MGT_OP_A_ADDRESS_ADDR;
                address_mem_read_address_1_o <= MGT_OP_B_ADDRESS_ADDR;
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');   
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= MUL_ACCU_MODE;
                sel_accu_o <= '1';
                done_o <= '0';
            when S_LOAD_MUL_RESULT_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= MUL_RESULT_COUNTER_ADDRESS;
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= DIRECT_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= S_ADDRESS;   
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '1';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when S_STORE_LOW =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '1';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= DIRECT_ADDRESS_ADDR;
                address_mem_data_input_o <= (others => '0');   
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '1';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when S_STORE_HIGH =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '1';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '1';
                counter_mem_write_address_o <= MUL_RESULT_COUNTER_ADDRESS;
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= DIRECT_ADDRESS_ADDR;
                address_mem_data_input_o <= (others => '0');   
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '1';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '1';
                done_o <= '0';
            when S_PROPAGATE_CARRY =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '1';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= DIRECT_ADDRESS_ADDR;
                address_mem_data_input_o <= (others => '0');   
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '1';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when S_LOAD_OP_B_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= MUL_OP_B_COUNTER_ADDRESS;
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');   
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '1';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when S_CHECK_OP_B_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');   
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when S_STORE_OP_B_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '1';
                counter_mem_write_address_o <= MUL_OP_B_COUNTER_ADDRESS;
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when S_RESET_OP_B_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when S_LOAD_OP_A_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '1';
                counter_mem_write_address_o <= MUL_OP_B_COUNTER_ADDRESS;
                counter_mem_read_address_0_o <= MUL_OP_A_COUNTER_ADDRESS;
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                 order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '1';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when S_CHECK_OP_A_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when S_STORE_OP_A_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '1';
                counter_mem_write_address_o <= MUL_OP_A_COUNTER_ADDRESS;
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
             when S_INIT_MUL_RESULT_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '1';
                counter_mem_write_address_o <= MUL_RESULT_COUNTER_ADDRESS;
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when T_SET_WRITE_REG =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= TEMP_RESULT_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= T_ADDRESS;                
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when T_SET_OP_A =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '1';
                counter_mem_write_address_o <= MUL_RESULT_COUNTER_ADDRESS;
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= TEMP_OP_A_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= S_ADDRESS;                
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when T_SET_OP_B =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '1';
                counter_mem_write_address_o <= MUL_OP_A_COUNTER_ADDRESS;
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= TEMP_OP_B_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= V_ADDRESS;                
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when T_MUL_ACCU_LOW =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= MUL_OP_A_COUNTER_ADDRESS;
                counter_mem_read_address_1_o <= MUL_OP_B_COUNTER_ADDRESS;
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= TEMP_OP_A_ADDRESS_ADDR;
                address_mem_read_address_1_o <= TEMP_OP_B_ADDRESS_ADDR;
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');                
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '1';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_ACCU_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when T_MUL_ACCU_HIGH =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= MUL_OP_A_COUNTER_ADDRESS;
                counter_mem_read_address_1_o <= MUL_OP_B_COUNTER_ADDRESS;
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= TEMP_OP_A_ADDRESS_ADDR;
                address_mem_read_address_1_o <= TEMP_OP_B_ADDRESS_ADDR;
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');   
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= MUL_ACCU_MODE;
                sel_accu_o <= '1';
                done_o <= '0';
            when T_LOAD_MUL_RESULT_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= MUL_RESULT_COUNTER_ADDRESS;
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');   
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '1';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when T_STORE_LOW =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '1';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= TEMP_RESULT_ADDRESS_ADDR;
                address_mem_data_input_o <= (others => '0');   
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '1';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when T_STORE_HIGH =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '1';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '1';
                counter_mem_write_address_o <= MUL_RESULT_COUNTER_ADDRESS;
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= TEMP_RESULT_ADDRESS_ADDR;
                address_mem_data_input_o <= (others => '0');   
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '1';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '1';
                done_o <= '0';
            when T_PROPAGATE_CARRY =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '1';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= TEMP_RESULT_ADDRESS_ADDR;
                address_mem_data_input_o <= (others => '0');   
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '1';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when T_LOAD_OP_B_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= MUL_OP_B_COUNTER_ADDRESS;
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');   
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '1';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when T_CHECK_OP_B_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');   
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when T_STORE_OP_B_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '1';
                counter_mem_write_address_o <= MUL_OP_B_COUNTER_ADDRESS;
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when T_RESET_OP_B_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when T_LOAD_OP_A_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '1';
                counter_mem_write_address_o <= MUL_OP_B_COUNTER_ADDRESS;
                counter_mem_read_address_0_o <= MUL_OP_A_COUNTER_ADDRESS;
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '1';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when T_CHECK_OP_A_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when T_STORE_OP_A_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '1';
                counter_mem_write_address_o <= MUL_OP_A_COUNTER_ADDRESS;
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
             when T_INIT_MUL_RESULT_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '1';
                counter_mem_write_address_o <= MUL_RESULT_COUNTER_ADDRESS;
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when M_MUL_SET_WRITE_REG =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= TEMP_RESULT_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= M_ADDRESS;                
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when M_MUL_SET_OP_A =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '1';
                counter_mem_write_address_o <= MUL_RESULT_COUNTER_ADDRESS;
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= TEMP_OP_A_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= T_ADDRESS;                
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when M_MUL_SET_OP_B =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '1';
                counter_mem_write_address_o <= MUL_OP_A_COUNTER_ADDRESS;
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= TEMP_OP_B_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= N_ADDRESS;                
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when M_MUL_ACCU_LOW =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= MUL_OP_A_COUNTER_ADDRESS;
                counter_mem_read_address_1_o <= MUL_OP_B_COUNTER_ADDRESS;
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= TEMP_OP_A_ADDRESS_ADDR;
                address_mem_read_address_1_o <= TEMP_OP_B_ADDRESS_ADDR;
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');                
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '1';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_ACCU_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when M_MUL_ACCU_HIGH =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= MUL_OP_A_COUNTER_ADDRESS;
                counter_mem_read_address_1_o <= MUL_OP_B_COUNTER_ADDRESS;
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= TEMP_OP_A_ADDRESS_ADDR;
                address_mem_read_address_1_o <= TEMP_OP_B_ADDRESS_ADDR;
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');   
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= MUL_ACCU_MODE;
                sel_accu_o <= '1';
                done_o <= '0';
            when M_LOAD_MUL_RESULT_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= MUL_RESULT_COUNTER_ADDRESS;
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');   
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '1';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when M_STORE_LOW =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '1';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= TEMP_RESULT_ADDRESS_ADDR;
                address_mem_data_input_o <= (others => '0');   
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '1';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when M_STORE_HIGH =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '1';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '1';
                counter_mem_write_address_o <= MUL_RESULT_COUNTER_ADDRESS;
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= TEMP_RESULT_ADDRESS_ADDR;
                address_mem_data_input_o <= (others => '0');   
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '1';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '1';
                done_o <= '0';
            when M_PROPAGATE_CARRY =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '1';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= TEMP_RESULT_ADDRESS_ADDR;
                address_mem_data_input_o <= (others => '0');   
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '1';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when M_LOAD_OP_B_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= MUL_OP_B_COUNTER_ADDRESS;
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');   
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '1';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when M_CHECK_OP_B_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');   
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when M_STORE_OP_B_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '1';
                counter_mem_write_address_o <= MUL_OP_B_COUNTER_ADDRESS;
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when M_RESET_OP_B_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when M_LOAD_OP_A_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '1';
                counter_mem_write_address_o <= MUL_OP_B_COUNTER_ADDRESS;
                counter_mem_read_address_0_o <= MUL_OP_A_COUNTER_ADDRESS;
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '1';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when M_CHECK_OP_A_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when M_STORE_OP_A_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '1';
                counter_mem_write_address_o <= MUL_OP_A_COUNTER_ADDRESS;
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
             when M_INIT_MUL_RESULT_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '1';
                counter_mem_write_address_o <= MUL_RESULT_COUNTER_ADDRESS;
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when M_ADD_SET_WRITE_REG =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= TEMP_RESULT_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= M_ADDRESS;                
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when M_ADD_SET_OP_A =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '1';
                counter_mem_write_address_o <= MUL_RESULT_COUNTER_ADDRESS;
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= TEMP_OP_A_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= M_ADDRESS;                
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when M_ADD_SET_OP_B =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '1';
                counter_mem_write_address_o <= MUL_OP_A_COUNTER_ADDRESS;
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= TEMP_OP_B_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= S_ADDRESS;                
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when M_ADD_ANY =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '1';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= TEMP_OP_A_ADDRESS_ADDR;
                address_mem_read_address_1_o <= TEMP_OP_B_ADDRESS_ADDR;
                address_mem_read_address_2_o <= TEMP_RESULT_ADDRESS_ADDR;
                address_mem_data_input_o <= (others => '0');                
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '1';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= ADD_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when U_SET_OP_A =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= TEMP_OP_A_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= U_ADDRESS;                
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when U_SET_OP_B =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= TEMP_OP_B_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= N_ADDRESS;                
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '1';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when U_SUB_ANY =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '1';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= TEMP_OP_A_ADDRESS_ADDR;
                address_mem_read_address_1_o <= TEMP_OP_B_ADDRESS_ADDR;
                address_mem_read_address_2_o <= MGT_RESULT_ADDRESS_ADDR;
                address_mem_data_input_o <= (others => '0');                
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '1';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= SUB_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when U_CHECK_CARRY =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');                
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
             when U_COPY =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '1';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= TEMP_OP_A_ADDRESS_ADDR;
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= MGT_RESULT_ADDRESS_ADDR;
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= COPY_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when U_OVERFLOW_SET_OP_A =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= TEMP_OP_A_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= U_ADDRESS;
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when U_OVERFLOW_SET_OP_B =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= TEMP_OP_B_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= N_ADDRESS;
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '1';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when U_OVERFLOW_SUB_ANY =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '1';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= TEMP_OP_A_ADDRESS_ADDR;
                address_mem_read_address_1_o <= TEMP_OP_B_ADDRESS_ADDR;
                address_mem_read_address_2_o <= MGT_RESULT_ADDRESS_ADDR;
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '1';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= SUB_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when FIRST_X_SET_WRITE_REG =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= TEMP_RESULT_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= X_ADDRESS;
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when FIRST_X_SET_OP_A =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= TEMP_OP_A_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= X_ADDRESS;
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when FIRST_X_SET_OP_B =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= TEMP_OP_B_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= N_ADDRESS;
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '1';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when FIRST_X_SUB_ANY =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '1';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= TEMP_OP_A_ADDRESS_ADDR;
                address_mem_read_address_1_o <= TEMP_OP_B_ADDRESS_ADDR;
                address_mem_read_address_2_o <= TEMP_RESULT_ADDRESS_ADDR;
                address_mem_data_input_o <= (others => '0');                
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '1';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= SUB_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when MGT_ANY_0_SET_WRITE_REG =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '1';
                counter_mem_write_address_o <= EXP_COUNTER_ADDRESS;
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= MGT_RESULT_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= X_ADDRESS;                
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '1';
                order_reg_data_input_o <= ANY_0; 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when MGT_ANY_0_SET_OP_A =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= MGT_OP_A_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= X_ADDRESS;  
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';                            
            when MGT_ANY_0_SET_OP_B =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= MGT_OP_B_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= X_ADDRESS; 
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when MGT_ANY_1_SET_WRITE_REG =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= MGT_RESULT_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= X_ADDRESS;                
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '1';
                order_reg_data_input_o <= ANY_1; 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when MGT_ANY_1_SET_OP_A =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= MGT_OP_A_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= A_ADDRESS;  
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';                            
            when MGT_ANY_1_SET_OP_B =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= MGT_OP_B_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= X_ADDRESS; 
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when MGT_FINAL_0_SET_WRITE_REG =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= MGT_RESULT_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= X_ADDRESS;                
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '1';
                order_reg_data_input_o <= FINAL_0; 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when MGT_FINAL_0_SET_OP_A =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= MGT_OP_A_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= A_ADDRESS;  
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';                            
            when MGT_FINAL_0_SET_OP_B =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= MGT_OP_B_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= X_ADDRESS; 
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when MGT_FINAL_1_SET_WRITE_REG =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= MGT_RESULT_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= X_ADDRESS;                
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '1';
                order_reg_data_input_o <= FINAL_1; 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when X_COPY_TO_S_SET_WRITE_REG =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= TEMP_RESULT_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= S_ADDRESS;                
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when X_COPY_TO_S_SET_OP_A =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= TEMP_OP_A_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= X_ADDRESS;  
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '1';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when X_COPY_TO_S_RESET_S =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '1';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= TEMP_RESULT_ADDRESS_ADDR;
                address_mem_read_address_1_o <= TEMP_RESULT_ADDRESS_ADDR;
                address_mem_read_address_2_o <= TEMP_RESULT_ADDRESS_ADDR;
                address_mem_data_input_o <= (others => '0');  
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '1';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= SUB_MODE;
                sel_accu_o <= '0';
                done_o <= '0';                                        
            when X_COPY_TO_S_INIT_COPY =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');  
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';       
            when X_COPY_TO_S_COPY =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '1';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= TEMP_OP_A_ADDRESS_ADDR;
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= TEMP_RESULT_ADDRESS_ADDR;
                address_mem_data_input_o <= (others => '0');  
                accu_0_reset_o <= '0';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '0';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= COPY_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when CHECK_ORDER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '0';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '1';
            when LOAD_EXP_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= EXP_COUNTER_ADDRESS;
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= DIRECT_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= E_ADDRESS;
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '1';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when CHECK_EXP =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= DIRECT_ADDRESS_ADDR;
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= CHECK_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when LOAD_EXP_COUNTER_1 =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= EXP_COUNTER_ADDRESS;
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '1';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when INC_COUNTER =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when SET_RESET_M_OP_A =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= TEMP_OP_A_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= M_ADDRESS;
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when SET_RESET_S_WRITE_REG =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= TEMP_RESULT_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= S_ADDRESS;
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when RESET_S =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '1';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= TEMP_OP_A_ADDRESS_ADDR;
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= TEMP_RESULT_ADDRESS_ADDR;
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= COPY_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when SET_RESET_T_WRITE_REG =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= TEMP_RESULT_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= T_ADDRESS;
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when RESET_T =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '1';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= TEMP_OP_A_ADDRESS_ADDR;
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= TEMP_RESULT_ADDRESS_ADDR;
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= COPY_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when SET_RESET_M_WRITE_REG =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '1';
                address_mem_write_address_o <= TEMP_RESULT_ADDRESS_ADDR;
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= U_ADDRESS;
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '0';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= MUL_STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when RESET_M =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '1';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= TEMP_OP_A_ADDRESS_ADDR;
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= TEMP_RESULT_ADDRESS_ADDR;
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '1';
                control_o <= COPY_MODE;
                sel_accu_o <= '0';
                done_o <= '0';
            when DONE =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                address_mem_data_input_o <= (others => '0');
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                order_reg_reset_o <= '1';
                order_reg_en_o <= '0';
                order_reg_data_input_o <= (others => '0'); 
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '1';
            when others =>
                data_mem_reset_o <= '1';
                data_mem_en_o <= '0';
                counter_mem_reset_o <= '1';
                counter_mem_en_o <= '0';
                counter_mem_write_address_o <= (others => '0');
                counter_mem_read_address_0_o <= (others => '0');
                counter_mem_read_address_1_o <= (others => '0');
                address_mem_reset_o <= '1';
                address_mem_en_o <= '0';
                address_mem_write_address_o <= (others => '0');
                address_mem_read_address_0_o <= (others => '0');
                address_mem_read_address_1_o <= (others => '0');
                address_mem_read_address_2_o <= (others => '0');
                accu_0_reset_o <= '1';
                accu_0_en_o <= '0';
                accu_1_reset_o <= '1';
                accu_1_en_o <= '0';
                carry_reg_reset_o <= '1';
                carry_reg_set_o <= '0';
                carry_reg_en_o <= '0';
                counter_inst_reset_o <= '1';
                counter_inst_set_o <= '0';
                counter_inst_en_o <= '0';
                control_o <= STORE_MODE;
                sel_accu_o <= '0';
                done_o <= '1';
        end case;
    end process;
    
end FSM_arch;
